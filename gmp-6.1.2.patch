Only in gmp-6.1.2-patched: gmp-6.1.2.patch
diff -ru gmp-6.1.2/mpz/inp_raw.c gmp-6.1.2-patched/mpz/inp_raw.c
--- gmp-6.1.2/mpz/inp_raw.c	2016-12-16 12:45:27.000000000 -0300
+++ gmp-6.1.2-patched/mpz/inp_raw.c	2019-11-30 16:17:56.722429316 -0300
@@ -64,9 +64,9 @@
 size_t
 mpz_inp_raw (mpz_ptr x, FILE *fp)
 {
-  unsigned char  csize_bytes[4];
+  unsigned char  csize_bytes[8];
   mp_size_t      csize, abs_xsize, i;
-  size_t         size;
+  /* size_t         size; */
   size_t         abs_csize;
   char           *cp;
   mp_ptr         xp, sp, ep;
@@ -75,17 +75,26 @@
   if (fp == 0)
     fp = stdin;
 
-  /* 4 bytes for size */
+  /* 8 bytes for size */
   if (fread (csize_bytes, sizeof (csize_bytes), 1, fp) != 1)
     return 0;
 
-  size = (((size_t) csize_bytes[0] << 24) + ((size_t) csize_bytes[1] << 16) +
-	  ((size_t) csize_bytes[2] << 8)  + ((size_t) csize_bytes[3]));
-
-  if (size < 0x80000000u)
-    csize = size;
-  else
-    csize = size - 0x80000000u - 0x80000000u;
+  csize = (
+          (  (size_t) csize_bytes[0] << 56)
+          + ((size_t) csize_bytes[1] << 48)
+          + ((size_t) csize_bytes[2] << 40)
+          + ((size_t) csize_bytes[3] << 32)
+          + ((size_t) csize_bytes[4] << 24)
+          + ((size_t) csize_bytes[5] << 16)
+          + ((size_t) csize_bytes[6] << 8)
+          + ((size_t) csize_bytes[7]));
+
+  if (sizeof (csize) > 8 && csize & 0x8000000000000000LL)
+    csize -= 0x8000000000000000LL << 1;
+  /* if (size < 0x80000000u) */
+  /*   csize = size; */
+  /* else */
+  /*   csize = size - 0x80000000u - 0x80000000u; */
 
   abs_csize = ABS (csize);
 
@@ -166,5 +175,5 @@
     }
 
   SIZ(x) = (csize >= 0 ? abs_xsize : -abs_xsize);
-  return abs_csize + 4;
+  return abs_csize + 8;
 }
Only in gmp-6.1.2-patched/mpz: .inp_raw.c.swp
diff -ru gmp-6.1.2/mpz/out_raw.c gmp-6.1.2-patched/mpz/out_raw.c
--- gmp-6.1.2/mpz/out_raw.c	2016-12-16 12:45:27.000000000 -0300
+++ gmp-6.1.2-patched/mpz/out_raw.c	2019-11-30 12:46:21.884457505 -0300
@@ -1,32 +1,32 @@
 /* mpz_out_raw -- write an mpz_t in raw format.
 
-Copyright 2001, 2002 Free Software Foundation, Inc.
+   Copyright 2001, 2002 Free Software Foundation, Inc.
 
-This file is part of the GNU MP Library.
+   This file is part of the GNU MP Library.
 
-The GNU MP Library is free software; you can redistribute it and/or modify
-it under the terms of either:
+   The GNU MP Library is free software; you can redistribute it and/or modify
+   it under the terms of either:
 
-  * the GNU Lesser General Public License as published by the Free
-    Software Foundation; either version 3 of the License, or (at your
-    option) any later version.
+ * the GNU Lesser General Public License as published by the Free
+ Software Foundation; either version 3 of the License, or (at your
+ option) any later version.
 
-or
+ or
 
-  * the GNU General Public License as published by the Free Software
-    Foundation; either version 2 of the License, or (at your option) any
-    later version.
+ * the GNU General Public License as published by the Free Software
+ Foundation; either version 2 of the License, or (at your option) any
+ later version.
 
-or both in parallel, as here.
+ or both in parallel, as here.
 
-The GNU MP Library is distributed in the hope that it will be useful, but
-WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
-or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
-for more details.
+ The GNU MP Library is distributed in the hope that it will be useful, but
+ WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ for more details.
 
-You should have received copies of the GNU General Public License and the
-GNU Lesser General Public License along with the GNU MP Library.  If not,
-see https://www.gnu.org/licenses/.  */
+ You should have received copies of the GNU General Public License and the
+ GNU Lesser General Public License along with the GNU MP Library.  If not,
+ see https://www.gnu.org/licenses/.  */
 
 #include <stdio.h>
 #include "gmp.h"
@@ -47,127 +47,130 @@
 
 #ifndef HTON_LIMB_STORE
 #define HTON_LIMB_STORE(dst, limb)                                      \
-  do {                                                                  \
-    mp_limb_t  __limb = (limb);                                         \
-    char      *__p = (char *) (dst);                                    \
-    int        __i;                                                     \
-    for (__i = 0; __i < GMP_LIMB_BYTES; __i++)                       \
-      __p[__i] = (char) (__limb >> ((GMP_LIMB_BYTES-1 - __i) * 8));  \
-  } while (0)
+    do {                                                                  \
+        mp_limb_t  __limb = (limb);                                         \
+        char      *__p = (char *) (dst);                                    \
+        int        __i;                                                     \
+        for (__i = 0; __i < GMP_LIMB_BYTES; __i++)                       \
+        __p[__i] = (char) (__limb >> ((GMP_LIMB_BYTES-1 - __i) * 8));  \
+    } while (0)
 #endif
 
 
-size_t
+    size_t
 mpz_out_raw (FILE *fp, mpz_srcptr x)
 {
-  mp_size_t   xsize, abs_xsize, bytes, i;
-  mp_srcptr   xp;
-  char        *tp, *bp;
-  mp_limb_t   xlimb;
-  int         zeros;
-  size_t      tsize, ssize;
-
-  xsize = SIZ(x);
-  abs_xsize = ABS (xsize);
-  bytes = (abs_xsize * GMP_NUMB_BITS + 7) / 8;
-  tsize = ROUND_UP_MULTIPLE ((unsigned) 4, GMP_LIMB_BYTES) + bytes;
+    mp_size_t   xsize, abs_xsize, bytes, i;
+    mp_srcptr   xp;
+    char        *tp, *bp;
+    mp_limb_t   xlimb;
+    int         zeros;
+    size_t      tsize, ssize;
+
+    xsize = SIZ(x);
+    abs_xsize = ABS (xsize);
+    bytes = (abs_xsize * GMP_NUMB_BITS + 7) / 8;
+    tsize = ROUND_UP_MULTIPLE ((unsigned) 4, GMP_LIMB_BYTES) + bytes;
 
-  tp = __GMP_ALLOCATE_FUNC_TYPE (tsize, char);
-  bp = tp + ROUND_UP_MULTIPLE ((unsigned) 4, GMP_LIMB_BYTES);
+    tp = __GMP_ALLOCATE_FUNC_TYPE (tsize, char);
+    bp = tp + ROUND_UP_MULTIPLE ((unsigned) 4, GMP_LIMB_BYTES);
 
-  if (bytes != 0)
+    if (bytes != 0)
     {
-      bp += bytes;
-      xp = PTR (x);
-      i = abs_xsize;
-
-      if (GMP_NAIL_BITS == 0)
-	{
-	  /* reverse limb order, and byte swap if necessary */
+        bp += bytes;
+        xp = PTR (x);
+        i = abs_xsize;
+
+        if (GMP_NAIL_BITS == 0)
+        {
+            /* reverse limb order, and byte swap if necessary */
 #ifdef _CRAY
-	  _Pragma ("_CRI ivdep");
+            _Pragma ("_CRI ivdep");
 #endif
-	  do
-	    {
-	      bp -= GMP_LIMB_BYTES;
-	      xlimb = *xp;
-	      HTON_LIMB_STORE ((mp_ptr) bp, xlimb);
-	      xp++;
-	    }
-	  while (--i > 0);
-
-	  /* strip high zero bytes (without fetching from bp) */
-	  count_leading_zeros (zeros, xlimb);
-	  zeros /= 8;
-	  bp += zeros;
-	  bytes -= zeros;
-	}
-      else
-	{
-	  mp_limb_t  new_xlimb;
-	  int        bits;
-	  ASSERT_CODE (char *bp_orig = bp - bytes);
-
-	  ASSERT_ALWAYS (GMP_NUMB_BITS >= 8);
-
-	  bits = 0;
-	  xlimb = 0;
-	  for (;;)
-	    {
-	      while (bits >= 8)
-		{
-		  ASSERT (bp > bp_orig);
-		  *--bp = xlimb & 0xFF;
-		  xlimb >>= 8;
-		  bits -= 8;
-		}
-
-	      if (i == 0)
-		break;
-
-	      new_xlimb = *xp++;
-	      i--;
-	      ASSERT (bp > bp_orig);
-	      *--bp = (xlimb | (new_xlimb << bits)) & 0xFF;
-	      xlimb = new_xlimb >> (8 - bits);
-	      bits += GMP_NUMB_BITS - 8;
-	    }
-
-	  if (bits != 0)
-	    {
-	      ASSERT (bp > bp_orig);
-	      *--bp = xlimb;
-	    }
-
-	  ASSERT (bp == bp_orig);
-	  while (*bp == 0)
-	    {
-	      bp++;
-	      bytes--;
-	    }
-	}
+            do
+            {
+                bp -= GMP_LIMB_BYTES;
+                xlimb = *xp;
+                HTON_LIMB_STORE ((mp_ptr) bp, xlimb);
+                xp++;
+            }
+            while (--i > 0);
+
+            /* strip high zero bytes (without fetching from bp) */
+            count_leading_zeros (zeros, xlimb);
+            zeros /= 8;
+            bp += zeros;
+            bytes -= zeros;
+        }
+        else
+        {
+            mp_limb_t  new_xlimb;
+            int        bits;
+            ASSERT_CODE (char *bp_orig = bp - bytes);
+
+            ASSERT_ALWAYS (GMP_NUMB_BITS >= 8);
+
+            bits = 0;
+            xlimb = 0;
+            for (;;)
+            {
+                while (bits >= 8)
+                {
+                    ASSERT (bp > bp_orig);
+                    *--bp = xlimb & 0xFF;
+                    xlimb >>= 8;
+                    bits -= 8;
+                }
+
+                if (i == 0)
+                    break;
+
+                new_xlimb = *xp++;
+                i--;
+                ASSERT (bp > bp_orig);
+                *--bp = (xlimb | (new_xlimb << bits)) & 0xFF;
+                xlimb = new_xlimb >> (8 - bits);
+                bits += GMP_NUMB_BITS - 8;
+            }
+
+            if (bits != 0)
+            {
+                ASSERT (bp > bp_orig);
+                *--bp = xlimb;
+            }
+
+            ASSERT (bp == bp_orig);
+            while (*bp == 0)
+            {
+                bp++;
+                bytes--;
+            }
+        }
     }
 
-  /* total bytes to be written */
-  ssize = 4 + bytes;
+    /* total bytes to be written */
+    ssize = 8 + bytes;
 
-  /* twos complement negative for the size value */
-  bytes = (xsize >= 0 ? bytes : -bytes);
+    /* twos complement negative for the size value */
+    bytes = (xsize >= 0 ? bytes : -bytes);
 
-  /* so we don't rely on sign extension in ">>" */
-  ASSERT_ALWAYS (sizeof (bytes) >= 4);
+    /* so we don't rely on sign extension in ">>" */
+    ASSERT_ALWAYS (sizeof (bytes) >= 8);
+    bp[-8] = bytes >> 56;
+    bp[-7] = bytes >> 48;
+    bp[-6] = bytes >> 40;
+    bp[-5] = bytes >> 32;
+    bp[-4] = bytes >> 24;
+    bp[-3] = bytes >> 16;
+    bp[-2] = bytes >> 8;
+    bp[-1] = bytes;
+    bp -= 8;
+
+    if (fp == 0)
+        fp = stdout;
+    if (fwrite (bp, ssize, 1, fp) != 1)
+        ssize = 0;
 
-  bp[-4] = bytes >> 24;
-  bp[-3] = bytes >> 16;
-  bp[-2] = bytes >> 8;
-  bp[-1] = bytes;
-  bp -= 4;
-
-  if (fp == 0)
-    fp = stdout;
-  if (fwrite (bp, ssize, 1, fp) != 1)
-    ssize = 0;
-
-  (*__gmp_free_func) (tp, tsize);
-  return ssize;
+    (*__gmp_free_func) (tp, tsize);
+    return ssize;
 }
